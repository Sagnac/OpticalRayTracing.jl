var documenterSearchIndex = {"docs":
[{"location":"Plotting Examples/#Plotting-Examples","page":"Plotting Examples","title":"Plotting Examples","text":"","category":"section"},{"location":"Plotting Examples/","page":"Plotting Examples","title":"Plotting Examples","text":"This package defines several plot recipes for Makie.","category":"page"},{"location":"Plotting Examples/","page":"Plotting Examples","title":"Plotting Examples","text":"Supported keyword arguments are:","category":"page"},{"location":"Plotting Examples/","page":"Plotting Examples","title":"Plotting Examples","text":"theme (using Makie's theme customizability);\nray_colors (a two-tuple of the marginal & chief ray colors);\nsurface_color (for the optical element surfaces & image plane);\nanything Makie's lines accepts.","category":"page"},{"location":"Plotting Examples/","page":"Plotting Examples","title":"Plotting Examples","text":"Using the mutating rayplot! version will draw on top of the current figure.","category":"page"},{"location":"Plotting Examples/","page":"Plotting Examples","title":"Plotting Examples","text":"using GLMakie\n\ntheme = theme_black()\nsurface_color = :white\nray_colors = (:cyan, :red)\n\nrayplot(surfaces, a, system; theme, surface_color, ray_colors)\n\nrays = raytrace(system, -24.0, -1.5 * system.f)\nfig = rayplot(rays)\nrays = raytrace(system, 24.0, -1.5 * system.f)\nrayplot!(rays)","category":"page"},{"location":"Plotting Examples/","page":"Plotting Examples","title":"Plotting Examples","text":"(Image: rayplot) (Image: rays)","category":"page"},{"location":"Seidel Aberrations/#Seidel-Aberrations","page":"Seidel Aberrations","title":"Seidel Aberrations","text":"","category":"section"},{"location":"Seidel Aberrations/","page":"Seidel Aberrations","title":"Seidel Aberrations","text":"The surface coefficients can be extracted by querying the relevant WIJK fields. In addition, chromatic aberration can be quantified for a given δn dispersion vector. The results are optical path differences in waves at the d spectral line for a system in mm; the wavelength parameter can also be tuned.","category":"page"},{"location":"Seidel Aberrations/","page":"Seidel Aberrations","title":"Seidel Aberrations","text":"aberrations(surfaces, system)","category":"page"},{"location":"Seidel Aberrations/","page":"Seidel Aberrations","title":"Seidel Aberrations","text":"The return value holds the relevant metadata in an Aberration structure. The named fields (spherical, etc.) are the sum totals. petzval, tangential, & sagittal refer to the respective field curvatures, while the W020 and W111 coefficient vectors refer to defocus & tilt from axial & lateral color, respectively.","category":"page"},{"location":"Vignetting Analysis/#Vignetting-Analysis","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"","category":"section"},{"location":"Vignetting Analysis/","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"Given a system or ray bundle and a set of apertures this package provides a basic tool for evaluating vignetting criteria at each aperture. Along with identifying, by index, which apertures cause partial or full vignetting, the returned 5 column semi-diameter matrix contains:","category":"page"},{"location":"Vignetting Analysis/","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"The provided aperture size;\nThe marginal ray limit: the size at which the aperture becomes the stop due to limiting the on-axis ray bundle;\nThe size necessary for no vignetting to occur;\nThe size at which the half-vignetting condition is satisified;\nThe size at which the aperture clips the entire off-axis ray bundle; this is the minimum aperture size at which the given field of view is still supported down to approximately zero irradiance.","category":"page"},{"location":"Vignetting Analysis/","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"In addition, the maximum system field of view for the unvignetted, half-vignetted, and fully-vignetted cases is determined for the input aperture sizes.","category":"page"},{"location":"Vignetting Analysis/","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"By passing the exported FOV type the second method allows directly extracting the maximum supported paraxial principal ray slopes and the corresponding image heights for all three vignetting conditions.","category":"page"},{"location":"Vignetting Analysis/","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"In essence, the matrix represents the supported aperture sizes for each case given the system field of view and the returned vectors from the second method correspond to the maximal fields for the given aperture sizes.","category":"page"},{"location":"Vignetting Analysis/","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"Any NaNs in the matrix signify that there is no possible size which fits the criteria due to the aforementioned limiting factor.","category":"page"},{"location":"Vignetting Analysis/","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"vignetting(system, a)","category":"page"},{"location":"Vignetting Analysis/","page":"Vignetting Analysis","title":"Vignetting Analysis","text":"vignetting(system, a, FOV)","category":"page"},{"location":"#OpticalRayTracing.jl","page":"OpticalRayTracing.jl","title":"OpticalRayTracing.jl","text":"","category":"section"},{"location":"","page":"OpticalRayTracing.jl","title":"OpticalRayTracing.jl","text":"First order paraxial ray tracing, optical system solving, and aberration analysis.","category":"page"},{"location":"","page":"OpticalRayTracing.jl","title":"OpticalRayTracing.jl","text":"","category":"page"},{"location":"","page":"OpticalRayTracing.jl","title":"OpticalRayTracing.jl","text":"This package is meant to be an initial design prototyping tool.","category":"page"},{"location":"#Installation","page":"OpticalRayTracing.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"OpticalRayTracing.jl","title":"OpticalRayTracing.jl","text":"using Pkg\nPkg.add(url = \"https://github.com/Sagnac/OpticalRayTracing.jl\")","category":"page"},{"location":"#Sample-usage","page":"OpticalRayTracing.jl","title":"Sample usage","text":"","category":"section"},{"location":"","page":"OpticalRayTracing.jl","title":"OpticalRayTracing.jl","text":"using OpticalRayTracing\n\n# Tessar lens, units in mm; prescription from Hecht's Optics\nsurfaces = [\n    # R        t        n\n    Inf        0.0      1.0;\n      16.28    3.57     1.6116;\n    -275.7     1.89     1.0;\n     -34.57    0.81     1.6053;\n      15.82    2.345    1.0;\n    Inf        0.905    1.0;\n    Inf        2.17     1.5123;\n      19.2     3.96     1.6116;\n     -24.0     0.0      1.0\n]\n\n# Clear aperture semi-diameters\na = [10.25, 10.25, 9.0, 9.0, 7.63, 9.0, 9.0, 9.0]\n\n# image height\nh′ = -21.5\n\nsystem = solve(surfaces, a, h′)","category":"page"},{"location":"","page":"OpticalRayTracing.jl","title":"OpticalRayTracing.jl","text":"system.M # vertex matrix","category":"page"},{"location":"Ray Tracing/#General-Ray-Tracing","page":"General Ray Tracing","title":"General Ray Tracing","text":"","category":"section"},{"location":"Ray Tracing/","page":"General Ray Tracing","title":"General Ray Tracing","text":"The raytrace function provides methods for tracing over a given system or lens while the transfer function provides convenience methods for working with transfer matrices.","category":"page"},{"location":"Ray Tracing/","page":"General Ray Tracing","title":"General Ray Tracing","text":"Lenses can be computed either by passing a surface matrix, as in Lens(surfaces), or directly by using the Lens(lens_matrix, refractive_indices) constructor.","category":"page"},{"location":"Ray Tracing/","page":"General Ray Tracing","title":"General Ray Tracing","text":"# telephoto objective comprised of two thin lenses in air\nlens = Lens([\n    # t/n   # power\n    0.0      0.02;\n    25.0    -0.02\n], ones(3))\n\ny, nu = 1.0, 0.0\n\nraytrace(lens, y, nu)","category":"page"},{"location":"Ray Tracing/","page":"General Ray Tracing","title":"General Ray Tracing","text":"# object height\nh = 10.0\n# signed object distance from vertex\ns = -100.0\n\nraytrace(system, h, s)","category":"page"},{"location":"Ray Tracing/","page":"General Ray Tracing","title":"General Ray Tracing","text":"(; f) = system\nFFL, BFL = system.EFFD, system.EBFD\n# positive distance from front vertex\nτ = f + abs(FFL)\n# positive distance from back vertex\nτ′ = f + BFL\nu = 0.07\n\n# 2f-2f system\ntransfer(system.M, [0.0, u], τ, τ′)","category":"page"},{"location":"Ray Tracing/","page":"General Ray Tracing","title":"General Ray Tracing","text":"In addition, general transfer matrices can be directly constructed by passing a Lens to the TransferMatrix constructor.","category":"page"},{"location":"API/#OpticalRayTracing.Lens","page":"API","title":"OpticalRayTracing.Lens","text":"Lens(surfaces::Matrix{Float64})\n\nConstruct a lens from a 3 column surface matrix where the first column corresponds to the radii of curvature, the second column to the thicknesses, and the third to the refractive indices.\n\nThe computed result wraps a two column lens matrix where the first column refers to the reduced thickness τ = t /n of the distance prior to the surface and the second to the surface power.\n\n```jldoctest julia> Lens([            Inf 0.0 1.0; # object space            50.0 3.0 1.5;            -50.0 0.0 1.0        ]) 2×2 Lens:  0.0  0.01  2.0  0.01\n\n\n\nLens(M, n)\n\nConstruct a lens directly from a two column lens matrix M containing the reduced thicknesses and surface powers corresponding to a refractive index vector n.\n\njulia> Lens([0.0 0.01; 2.0 0.01], [1.0, 1.5, 1.0]) 2×2 Lens:  0.0  0.01  2.0  0.01\n\nSee also: compute_surfaces.\n\n\n\n\n\n","category":"type"},{"location":"API/#OpticalRayTracing.aberrations","page":"API","title":"OpticalRayTracing.aberrations","text":"aberrations(surfaces, system, [λ], [δn])\n\nCompute wavefront error coefficients based on Seidel sums for a given system or ray basis. Results are in waves at the d-line by default. The dispersion vector δn allows calculation of chromatic aberration.\n\nThe returned Aberration type holds the per surface contributions in the WIJK fields (e.g. W040) while the system totals are held in the long form spherical, astigmatism, etc. fields.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.compute_surfaces","page":"API","title":"OpticalRayTracing.compute_surfaces","text":"compute_surfaces(lens::Lens)\n\nCompute the surface matrix from a given Lens.\n\n```jldoctest julia> compute_surfaces(Lens([0.0 0.01; 2.0 0.01], [1.0, 1.5, 1.0])) 3×3 Matrix{Float64}:   Inf   0.0  1.0   50.0  3.0  1.5  -50.0  0.0  1.0\n\nSee also: Lens.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.flatten","page":"API","title":"OpticalRayTracing.flatten","text":"flatten(M::TransferMatrix)\n\nReturn the cardinal points for the input vertex matrix.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.incidences","page":"API","title":"OpticalRayTracing.incidences","text":"incidences(surfaces, system)\n\nCompute the paraxial incidence angles over the system. Returns a four column matrix with the first two columns referring to the optical angles ni & nī for the marginal & chief ray, respectively, and the last two columns to the physical angles i, ī.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.rayplot","page":"API","title":"OpticalRayTracing.rayplot","text":"rayplot(system)\nrayplot(surfaces, a, system)\n\nPlots the given system or ray bundle using Makie; requires installation of a Makie backend such as GLMakie.\n\nSee also: rayplot!.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.rayplot!","page":"API","title":"OpticalRayTracing.rayplot!","text":"rayplot!(system)\nrayplot!(surfaces, a, system)\n\nMutating version of rayplot which draws on top of the active figure.\n\nSee also: rayplot.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.raypoints","page":"API","title":"OpticalRayTracing.raypoints","text":"raypoints(marginal::Ray{Marginal}, chief::Ray{Chief})\n\nReturn the coordinates for the given ray basis; useful for manual plotting.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.raytrace","page":"API","title":"OpticalRayTracing.raytrace","text":"raytrace(surfaces, y, ω, [a]; clip = false)\nraytrace(lens::Lens, y, ω)\n\nTrace a paraxial ray with height y and angle / slope ω = nu returning a Ray{Tangential} holding the ynu matrix.\n\nIf a set of aperture semi-diameters a is specified and clip = true any blocked ray will result in NaN in the trace matrix.\n\n\n\nraytrace(system::System, ȳ, s)\n\nTrace the marginal and chief ray through a given system for a given object height and distance from the objective; these are signed quantities.\n\nSee also: solve, incidences.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.reverse_transfer","page":"API","title":"OpticalRayTracing.reverse_transfer","text":"reverse_transfer(M::TransferMatrix, v::Vector, τ′, τ)\n\nTransfer an input [y, nu] vector in the reverse direction, extending by image & object space distances τ′, τ.\n\nSee also: transfer.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.scale!","page":"API","title":"OpticalRayTracing.scale!","text":"scale!(M::Lens)\n\nConvert the second column powers from dioptres to inverse millimeters.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.solve","page":"API","title":"OpticalRayTracing.solve","text":"solve(surfaces, a, [h′])\nsolve(lens::Lens, a, [h′])\n\nSolve a lens, returning a System holding the relevant properties. Fields are:\n\nf: effective focal length;\nEBFD: effective back focal distance;\nEFFD: effective front focal distance;\nN: f-number;\nFOV: full field of view in degrees;\nstop: surface matrix index denoting the aperture stop;\nEP: entrance pupil containing fields: D: diameter, t: distance from the front vertex;\nXP: exit pupil containing fields: D: diamater, t: distance from the back vertex;\nmarginal: marginal ray;\nchief: chief ray;\ntrace: the full ynu ray trace for the marginal & chief rays;\nH: Lagrange invariant;\nP1: front principal plane location w.r.t the front vertex;\nP2: back principal plane locaiton w.r.t the back vertex;\nPN: nodal point shift from the principal points;\nM: the vertex matrix;\nlens: Lens of the system.\n\nSee also: raytrace, incidences.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.transfer","page":"API","title":"OpticalRayTracing.transfer","text":"transfer(M::TransferMatrix, v::Vector, τ, τ′)\n\nTransfer an input [y, nu] vector, extending by object & image space distances τ, τ′.\n\nSee also: reverse_transfer.\n\n\n\n\n\n","category":"function"},{"location":"API/#OpticalRayTracing.vignetting","page":"API","title":"OpticalRayTracing.vignetting","text":"vignetting(system, a)\n\nPerform a vignetting analysis on the System for the given aperture sizes.\n\nDetermines the maximum FOVs corresponding to those sizes as well as returning a semi-diameter matrix with columns corresponding to conditions:\n\ninput;\nstop limited;\nunvignetted;\nhalf-vignetted;\nfully vignetted.\n\n\n\nvignetting(system, a, ::Type{FOV})\n\nReturn a two-tuple of three-element vectors corresponding to the maximum fields for the unvignetted, half-vignetted, and fully vignetted cases with the first element of the tuple corresponding to the paraxial chief ray slope and the second corresponding to the image height.\n\n\n\n\n\n","category":"function"}]
}
